openapi: 3.0.1
info:
  title: Swagger Questions
  version: 1.0.1
servers:
- url: https://question.swagger.io/api/v1
- url: http://question.swagger.io/api/v1
tags:
- name: questions
- name: quiz
- name: categories
paths:
  /questions:
    put:
      tags:
      - questions
      summary: Update an existing Question
      operationId: updateQuestion
      requestBody:
        description: Question object that needs to be updated to the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid Question supplied
          content: {}
        404:
          description: Question not found
          content: {}
        405:
          description: Invalid input
          content: {}
    post:
      tags:
      - questions
      summary: Add a new Question
      operationId: addQuestion
      requestBody:
        description: Question object that needs to be added to the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        405:
          description: Invalid input
          content: {}

  /quiz:
    get:
      tags:
      - quiz
      summary: Finds quiz questions by query
      description: Multiple parameters can be provided
      operationId: getQuizQuestions
      parameters:
      - name: quantity
        in: query
        description: How much Questions do you want
        schema:
          type: integer
          default: 5
      - name: difficulty
        in: query
        description: How difficult Questions should be
        schema:
          $ref: '#/components/schemas/Difficulty'
      - name: category
        in: query
        description: Question category
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        400:
          description: Invalid parameters
          content: {}

  /categories:
    get:
      tags:
      - categories
      summary: Gets all categories
      operationId: getCategories
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: bad request
          content: {}
    post:
      tags:
      - categories
      summary: Add a new Category
      operationId: addCategory
      requestBody:
        description: Category that needs to be added to the db
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: string
        405:
          description: Invalid input
          content: {}
        409:
          description: Given category already exists
          content: {}

components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          type: string
        difficulty:
          type: string
        body:
          type: string
        correctAnswer:
          type: integer
        answers:
          type: array
          items:
            type: string
    Difficulty:
      type: string
      enum:
        - hard
        - medium
        - easy
      default: medium
