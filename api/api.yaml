openapi: 3.0.1
info:
  title: Quiz! API
  description: 'This is a API for Quiz application made for the Components-based Technologies course.
  You can find out more about at [https://github.com/bartek-bartlomiej/agh-toik-quiz-app](https://github.com/bartek-bartlomiej/agh-toik-quiz-app).'
  license:
    name: MIT
  version: 1.0.3
servers:
- url: http://ec2-3-126-103-190.eu-central-1.compute.amazonaws.com:8080/api/v1/
tags:
- name: quiz
  description: Operations for acquiring questions for quiz
- name: questions
  description: Operations for managing questions
- name: categories
  description: Operations for managing questions' categories
paths:
  /questions:
    post:
      tags:
      - questions
      summary: Add a new question
      operationId: addQuestion
      requestBody:
        description: Question that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        201:
          description: Operation successful - contains question object with generated ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        405:
          description: Invalid input
          content: {}
    put:
      tags:
      - questions
      summary: Update an existing question
      operationId: updateQuestion
      requestBody:
        description: Question that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        200:
          description: Operation successful
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Question not found
          content: {}
        405:
          description: Invalid input
          content: {}
    get:
      tags:
      - questions
      summary: Return questions by category
      operationId: getQuestions
      parameters:
      - name: category
        in: query
        description: Category ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        400:
          description: Invalid ID supplied
          content: {}
  /questions/{questionId}:
    delete:
      tags:
      - questions
      summary: Delete a question
      operationId: deleteQuestion
      parameters:
      - name: questionId
        in: path
        description: ID of question to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Operation successful
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Question not found
          content: {}
  /categories:
    post:
      tags:
      - categories
      summary: Add a new category
      operationId: addCategory
      requestBody:
        description: Category that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Operation successful - contains category object with generated ID
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        405:
          description: Invalid input
          content: {}
        409:
          description: Given category name already exists
          content: {}
    put:
      tags:
      - categories
      summary: Update an existing category
      operationId: updateCategory
      requestBody:
        description: Category that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Operation successful
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Category not found
          content: {}
        405:
          description: Invalid input
          content: {}
        409:
          description: Given category name already exists
          content: {}
    get:
      tags:
      - categories
      summary: Get all categories
      operationId: getCategories
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{categoryId}:
    delete:
      tags:
      - categories
      summary: Delete a category
      operationId: deleteCategory
      parameters:
      - name: categoryId
        in: path
        description: ID of category to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Operation successful
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Category not found
          content: {}
  /quiz:
    get:
      tags:
      - quiz
      summary: Acquire quiz questions by query
      description: Multiple parameters can be provided
      operationId: getQuizQuestions
      parameters:
      - name: quantity
        in: query
        description: How much questions do you want
        required: true
        schema:
          type: integer
          default: 5
      - name: difficulty
        in: query
        description: How difficult questions should be
        required: true
        schema:
          $ref: '#/components/schemas/Difficulty'
      - name: category
        in: query
        description: Question category ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        400:
          description: Invalid parameters
          content: {}
components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        difficulty:
          type: string
        body:
          type: string
        correctAnswer:
          type: integer
        answers:
          type: array
          items:
            type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Difficulty:
      type: string
      enum:
        - hard
        - medium
        - easy
      default: medium
